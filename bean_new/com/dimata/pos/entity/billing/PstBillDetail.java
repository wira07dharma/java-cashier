/* Generated by Together */
package com.dimata.pos.entity.billing;

import com.dimata.cashierweb.entity.admin.AppUser;
import com.dimata.interfaces.BOCashier.I_BillingDetail;
import com.dimata.common.db.*;
import com.dimata.common.entity.contact.ContactList;
import com.dimata.common.entity.contact.PstContactList;
import com.dimata.common.entity.location.Negara;
import com.dimata.common.entity.location.PstNegara;
import com.dimata.posbo.entity.admin.PstAppUser;
/* package java */

/* package qdep */
import java.sql.ResultSet;
import java.util.Vector;

//import com.dimata.qdep.db.*;
/* package cashier */
import com.dimata.qdep.entity.Entity;
import com.dimata.qdep.entity.I_PersintentExc;
import com.dimata.util.lang.I_Language;

import com.dimata.posbo.entity.masterdata.*;
import com.dimata.util.Formater;
import java.util.Date;

public class PstBillDetail extends DBHandler implements I_DBInterface, I_DBType, I_PersintentExc, I_Language, I_BillingDetail {
    //public static final String TBL_CASH_BILL_DETAIL = "CASH_BILL_DETAIL";

    public static final String TBL_CASH_BILL_DETAIL = "cash_bill_detail";
    public static final int FLD_BILL_DETAIL_ID = 0;
    public static final int FLD_BILL_MAIN_ID = 1;
    public static final int FLD_UNIT_ID = 2;
    public static final int FLD_MATERIAL_ID = 3;
    public static final int FLD_QUANTITY = 4;
    public static final int FLD_ITEM_PRICE = 5;
    public static final int FLD_DISC_TYPE = 6;
    public static final int FLD_DISC = 7;
    public static final int FLD_TOTAL_PRICE = 8;
    public static final int FLD_SKU = 9;
    public static final int FLD_ITEM_NAME = 10;
    public static final int FLD_MATERIAL_TYPE = 11;
    public static final int FLD_COST = 12;
    public static final int FLD_DISC_PCT = 13;
    public static final int FLD_QTY_STOCK = 14;
    public static final int FLD_ITEM_PRICE_STOCK = 15;
    public static final int FLD_DISC_GLOBAL = 16;

    //Ari wiweka 20130719
    public static final int FLD_DISC1 = 17;
    public static final int FLD_DISC2 = 18;
    public static final int FLD_TOTAL_DISC = 19;
    public static final int FLD_NOTE = 20;

    public static final int FLD_STATUS = 21;
    public static final int FLD_STATUS_PRINT = 22;
    public static final int FLD_LENGTH_OF_ORDER = 23;
    public static final int FLD_LENGTH_OF_FINISH_ORDER = 24;
    public static final int FLD_TOTAL_SERVICE = 25;
    public static final int FLD_TOTAL_TAX = 26;
    public static final int FLD_PRINT_STATUS = 27;
    //UPDATED BY ARI 20160409
    public static final int FLD_TOTAL_COST = 28;
    //UPDATE BY DE KOYO 20160421
    public static final int FLD_PARENT_ID = 29;
    public static final int FLD_CUSTOME_PACK_BILLING_ID = 30;
    //UPDATE BY DE KOYO 20160902 
    public static final int FLD_PARENT_RETURN_ID = 31;
    public static final int FLD_USER_ORDER_ID = 32;
    public static final int FLD_USER_ID_SENT_TO_CHECKER = 33;
    public static final int FLD_DATE_SENT_TO_CHECKER = 34;
    public static final int FLD_USER_ID_TO_SERVED = 35;
    public static final int FLD_DATE_USER_TO_SERVERD = 36;
    public static final int FLD_CUSTOM_SCHEDULE_ID = 37;
    //added by dewok 20190217
    public static final int FLD_GUIDE_PRICE = 38;
    
    public static final String[] fieldNames = {
        "CASH_BILL_DETAIL_ID",
        "CASH_BILL_MAIN_ID",
        "UNIT_ID",
        "MATERIAL_ID",
        "QTY",
        "ITEM_PRICE",
        "DISC_TYPE",
        "DISC",
        "TOTAL_PRICE",
        "SKU",
        "ITEM_NAME",
        "MATERIAL_TYPE",
        "COST", "DISC_PCT",
        "QTY_STOCK", "ITEM_PRICE_STOCK",
        "DISC_GLOBAL",
        "DISC1",
        "DISC2",
        "TOTAL_DISC",
        "NOTE",
        "STATUS",
        "STATUS_PRINT",
        "LENGTH_OF_ORDER",
        "LENGTH_OF_ORDER_FINISH",
        "TOTAL_SERVICE",
        "TOTAL_TAX",
        "PRINT_STATUS",
        //UPDATED BY ARI 20160409
        "TOTAL_COST",
        //UPDATE BY DE KOYO 
        "PARENT_ID",
        "CUSTOME_PACK_BILLING_ID",
        "PARENT_RETURN_ID",
        "USER_ORDER_ID",
        "USER_ID_SENT_TO_CHECKER",
        "DATE_SENT_TO_CHECKER",
        "USER_ID_TO_SERVED",
        "DATE_USER_TO_SERVERD",
        //UPDATE BY ARI
        "CUSTOM_SCHEDULE_ID",
        //added by dewok 20190217
        "GUIDE_PRICE"

    };
    public static final int[] fieldTypes = {
        TYPE_LONG + TYPE_PK + TYPE_ID,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_LONG + TYPE_FK,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_STRING,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_STRING,
        TYPE_INT,
        TYPE_INT,
        TYPE_DATE,
        TYPE_DATE,
        TYPE_FLOAT,
        TYPE_FLOAT,
        TYPE_INT,
        TYPE_FLOAT,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_LONG,
        TYPE_DATE,
        TYPE_LONG,
        TYPE_DATE,
        TYPE_LONG,
        //added by dewok 20190217
        TYPE_FLOAT
    };
    public static final int TYPE_DISC_VAL = 0;
    public static final int TYPE_DISC_PCT = 1;
    public static final int UPDATE_STATUS_NONE = 0;
    public static final int UPDATE_STATUS_INSERTED = 1;
    public static final int UPDATE_STATUS_UPDATED = 2;
    public static final int UPDATE_STATUS_DELETED = 3;

    //constructor
    public PstBillDetail() {
    }

    public PstBillDetail(int i) throws DBException {
        super(new PstBillDetail());
    }

    public PstBillDetail(String sOid) throws DBException {
        super(new PstBillDetail(0));
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public PstBillDetail(long lOid) throws DBException {
        super(new PstBillDetail(0));
        String sOid = "0";
        try {
            sOid = String.valueOf(lOid);
        } catch (Exception e) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        if (!locate(sOid)) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        } else {
            return;
        }
    }

    public int getFieldSize() {
        return fieldNames.length;
    }

    public String getTableName() {
        return TBL_CASH_BILL_DETAIL;
    }

    public String[] getFieldNames() {
        return fieldNames;
    }

    public int[] getFieldTypes() {
        return fieldTypes;
    }

    public String getPersistentName() {
        return new PstBillDetail().getClass().getName();
    }

    public long fetchExc(Entity ent) throws Exception {
        Billdetail billdetail = fetchExc(ent.getOID());
        ent = (Entity) billdetail;
        return billdetail.getOID();
    }

    public long insertExc(Entity ent) throws Exception {
        return insertExc((Billdetail) ent);
    }

    public long updateExc(Entity ent) throws Exception {
        return updateExc((Billdetail) ent);
    }

    public long deleteExc(Entity ent) throws Exception {
        if (ent == null) {
            throw new DBException(this, DBException.RECORD_NOT_FOUND);
        }
        return deleteExc(ent.getOID());
    }

    public static Billdetail fetchExc(long oid) throws DBException {
        try {
            Billdetail billdetail = new Billdetail();
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            billdetail.setOID(oid);
            billdetail.setBillMainId(pstBillDetail.getlong(FLD_BILL_MAIN_ID));
            billdetail.setUnitId(pstBillDetail.getlong(FLD_UNIT_ID));
            billdetail.setMaterialId(pstBillDetail.getlong(FLD_MATERIAL_ID));
            billdetail.setItemName(pstBillDetail.getString(FLD_ITEM_NAME));
            billdetail.setItemPrice(pstBillDetail.getdouble(FLD_ITEM_PRICE));
            billdetail.setDiscType(pstBillDetail.getInt(FLD_DISC_TYPE));
            billdetail.setDisc(pstBillDetail.getdouble(FLD_DISC));
            billdetail.setQty(pstBillDetail.getdouble(FLD_QUANTITY));
            billdetail.setTotalPrice(pstBillDetail.getdouble(FLD_TOTAL_PRICE));
            billdetail.setSku(pstBillDetail.getString(FLD_SKU));
            billdetail.setMaterialType(pstBillDetail.getInt(FLD_MATERIAL_TYPE));
            billdetail.setCost(pstBillDetail.getdouble(FLD_COST));
            billdetail.setDiscPct(pstBillDetail.getdouble(FLD_DISC_PCT));
            billdetail.setQtyStock(pstBillDetail.getdouble(FLD_QTY_STOCK));
            billdetail.setItemPriceStock(pstBillDetail.getdouble(FLD_ITEM_PRICE_STOCK));
            billdetail.setDiscGlobal(pstBillDetail.getdouble(FLD_DISC_GLOBAL));
            billdetail.setDisc1(pstBillDetail.getdouble(FLD_DISC1));
            billdetail.setDisc2(pstBillDetail.getdouble(FLD_DISC2));
            billdetail.setTotalDisc(pstBillDetail.getdouble(FLD_TOTAL_DISC));
            billdetail.setSku(pstBillDetail.getString(FLD_SKU));
            billdetail.setNote(pstBillDetail.getString(FLD_NOTE));
            billdetail.setStatus(pstBillDetail.getInt(FLD_STATUS));
            billdetail.setStatusPrint(pstBillDetail.getInt(FLD_STATUS_PRINT));
            billdetail.setLengthOrder(pstBillDetail.getDate(FLD_LENGTH_OF_ORDER));
            billdetail.setTotalSvc(pstBillDetail.getdouble(FLD_TOTAL_SERVICE));
            billdetail.setTotalTax(pstBillDetail.getdouble(FLD_TOTAL_TAX));
            billdetail.setParentId(pstBillDetail.getlong(FLD_PARENT_ID));
            billdetail.setCutomePackBillingId(pstBillDetail.getlong(FLD_CUSTOME_PACK_BILLING_ID));
            billdetail.setParentReturnId(pstBillDetail.getlong(FLD_PARENT_RETURN_ID));
            billdetail.setUserOrderId(pstBillDetail.getlong(FLD_USER_ORDER_ID));
            billdetail.setUserIdSentToChecker(pstBillDetail.getlong(FLD_USER_ID_SENT_TO_CHECKER));
            billdetail.setDateSentToChecker(pstBillDetail.getDate(FLD_DATE_SENT_TO_CHECKER));
            billdetail.setUserIdToServed(pstBillDetail.getlong(FLD_USER_ID_TO_SERVED));
            billdetail.setDateUserToServed(pstBillDetail.getDate(FLD_DATE_USER_TO_SERVERD));
            billdetail.setCostumeScheduleId(pstBillDetail.getlong(FLD_CUSTOM_SCHEDULE_ID));
            //added by dewok 20190217
            billdetail.setGuidePrice(pstBillDetail.getdouble(FLD_GUIDE_PRICE));
            return billdetail;
        } catch (DBException dbe) {
            System.out.println("error =" + dbe);
            throw dbe;
        } catch (Exception e) {
            System.out.println("error =" + e);
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
    }

    public static long insertExc(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
            pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
            pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
            pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
            pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
            pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
            pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
            pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalSvc());
            pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
            pstBillDetail.setInt(FLD_PRINT_STATUS, billdetail.getPrintStatus());
            pstBillDetail.setLong(FLD_PARENT_ID, billdetail.getParentId());
            pstBillDetail.setLong(FLD_CUSTOME_PACK_BILLING_ID, billdetail.getCutomePackBillingId());
            pstBillDetail.setLong(FLD_PARENT_RETURN_ID, billdetail.getParentReturnId());
            pstBillDetail.setLong(FLD_USER_ORDER_ID, billdetail.getUserOrderId());
            pstBillDetail.setLong(FLD_USER_ID_SENT_TO_CHECKER, billdetail.getUserIdSentToChecker());
            pstBillDetail.setDate(FLD_DATE_SENT_TO_CHECKER, billdetail.getDateSentToChecker());
            pstBillDetail.setLong(FLD_USER_ID_TO_SERVED, billdetail.getUserIdToServed());
            pstBillDetail.setDate(FLD_DATE_USER_TO_SERVERD, billdetail.getDateUserToServed());
            pstBillDetail.setLong(FLD_CUSTOM_SCHEDULE_ID, billdetail.getCostumeScheduleId());
            //added by dewok 20190217
            pstBillDetail.setDouble(FLD_GUIDE_PRICE, billdetail.getGuidePrice());
            pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
            pstBillDetail.insert();
            billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }

    public static long insertExcByOid(Billdetail billdetail) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(0);
            pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
            pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
            pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
            pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
            pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
            pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
            pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
            pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
            pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
            pstBillDetail.setString(FLD_SKU, billdetail.getSku());
            pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
            pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
            pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
            pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
            pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
            pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
            pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
            pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
            pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
            pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
            pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
            pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
            pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
            pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalSvc());
            pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
            pstBillDetail.setLong(FLD_PARENT_ID, billdetail.getParentId());
            pstBillDetail.setLong(FLD_CUSTOME_PACK_BILLING_ID, billdetail.getCutomePackBillingId());
            pstBillDetail.setLong(FLD_PARENT_RETURN_ID, billdetail.getParentReturnId());
            pstBillDetail.setDate(FLD_DATE_SENT_TO_CHECKER, billdetail.getDateSentToChecker());
            pstBillDetail.setDate(FLD_DATE_USER_TO_SERVERD, billdetail.getDateUserToServed());
            pstBillDetail.setLong(FLD_USER_ID_TO_SERVED, billdetail.getUserIdToServed());
            pstBillDetail.setLong(FLD_CUSTOM_SCHEDULE_ID, billdetail.getCostumeScheduleId());

            //billdetail.setOID(pstBillDetail.getlong(FLD_BILL_DETAIL_ID));
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return billdetail.getOID();
    }

    public static long updateExc(Billdetail billdetail) throws DBException {
        try {
            if (billdetail.getOID() != 0) {
                PstBillDetail pstBillDetail = new PstBillDetail(billdetail.getOID());
                pstBillDetail.setLong(FLD_BILL_MAIN_ID, billdetail.getBillMainId());
                pstBillDetail.setLong(FLD_UNIT_ID, billdetail.getUnitId());
                pstBillDetail.setLong(FLD_MATERIAL_ID, billdetail.getMaterialId());
                pstBillDetail.setString(FLD_ITEM_NAME, billdetail.getItemName());
                pstBillDetail.setDouble(FLD_ITEM_PRICE, billdetail.getItemPrice());
                pstBillDetail.setInt(FLD_DISC_TYPE, billdetail.getDiscType());
                pstBillDetail.setDouble(FLD_DISC, billdetail.getDisc());
                pstBillDetail.setDouble(FLD_QUANTITY, billdetail.getQty());
                pstBillDetail.setDouble(FLD_TOTAL_PRICE, billdetail.getTotalPrice());
                pstBillDetail.setString(FLD_SKU, billdetail.getSku());
                pstBillDetail.setInt(FLD_MATERIAL_TYPE, billdetail.getMaterialType());
                pstBillDetail.setDouble(FLD_COST, billdetail.getCost());
                pstBillDetail.setDouble(FLD_DISC_PCT, billdetail.getDiscPct());
                pstBillDetail.setDouble(FLD_QTY_STOCK, billdetail.getQtyStock());
                pstBillDetail.setDouble(FLD_ITEM_PRICE_STOCK, billdetail.getItemPriceStock());
                pstBillDetail.setDouble(FLD_DISC_GLOBAL, billdetail.getDiscGlobal());
                pstBillDetail.setDouble(FLD_DISC1, billdetail.getDisc1());
                pstBillDetail.setDouble(FLD_DISC2, billdetail.getDisc2());
                pstBillDetail.setDouble(FLD_TOTAL_DISC, billdetail.getTotalDisc());
                pstBillDetail.setString(FLD_NOTE, billdetail.getNote());
                pstBillDetail.setInt(FLD_STATUS, billdetail.getStatus());
                pstBillDetail.setInt(FLD_STATUS_PRINT, billdetail.getStatusPrint());
                pstBillDetail.setDate(FLD_LENGTH_OF_ORDER, billdetail.getLengthOrder());
                pstBillDetail.setDouble(FLD_TOTAL_TAX, billdetail.getTotalTax());
                pstBillDetail.setDouble(FLD_TOTAL_SERVICE, billdetail.getTotalSvc());
                pstBillDetail.setDouble(FLD_TOTAL_COST, billdetail.getTotalCost());
                pstBillDetail.setLong(FLD_PARENT_ID, billdetail.getParentId());
                pstBillDetail.setLong(FLD_CUSTOME_PACK_BILLING_ID, billdetail.getCutomePackBillingId());
                pstBillDetail.setLong(FLD_PARENT_RETURN_ID, billdetail.getParentReturnId());
                pstBillDetail.setLong(FLD_USER_ORDER_ID, billdetail.getUserOrderId());
                pstBillDetail.setLong(FLD_USER_ID_SENT_TO_CHECKER, billdetail.getUserIdSentToChecker());
                pstBillDetail.setDate(FLD_DATE_SENT_TO_CHECKER, billdetail.getDateSentToChecker());
                pstBillDetail.setLong(FLD_USER_ID_TO_SERVED, billdetail.getUserIdToServed());
                pstBillDetail.setDate(FLD_DATE_USER_TO_SERVERD, billdetail.getDateUserToServed());
                pstBillDetail.setLong(FLD_CUSTOM_SCHEDULE_ID, billdetail.getCostumeScheduleId());
                //added by dewok 20190217
                pstBillDetail.setDouble(FLD_GUIDE_PRICE, billdetail.getGuidePrice());
                pstBillDetail.update();
                return billdetail.getOID();
            }
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return 0;
    }

    public static long deleteExc(long oid) throws DBException {
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(oid);
            pstBillDetail.delete();
        } catch (DBException dbe) {
            throw dbe;
        } catch (Exception e) {
            throw new DBException(new PstBillDetail(0), DBException.UNKNOWN);
        }
        return oid;
    }

    //add by gunadi, untuk mendapatkan query insert
    public static String getInsertSQL(Billdetail billdetail) {
        String sql = "";
        try {
            PstBillDetail pstBillDetail = new PstBillDetail(billdetail.getOID());
            sql = pstBillDetail.getInsertSQL();
        } catch (Exception exc) {
            System.out.println(exc.toString());
        }
        return sql;
    }

    public static Vector listAll() {
        return list(0, 500, "", "");
    }

    public static Vector listTmp(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }

            System.out.println(sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Billdetail billdetail = new Billdetail();
                resultToObject(rs, billdetail);
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * di cek dimana yang makai seperti ini?
     *
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     */
    public static Vector list(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();

                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getDouble("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setCost(rs.getDouble("COST"));

                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));

                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setDiscGlobal(rs.getDouble(fieldNames[FLD_DISC_GLOBAL]));

                billdetail.setStatusPrint(rs.getInt("STATUS_PRINT"));
                billdetail.setParentId(rs.getLong("PARENT_ID"));
                billdetail.setCutomePackBillingId(rs.getLong("" + fieldNames[FLD_CUSTOME_PACK_BILLING_ID] + ""));
                billdetail.setParentReturnId(rs.getLong("" + fieldNames[FLD_PARENT_RETURN_ID] + ""));
                billdetail.setCostumeScheduleId(rs.getLong(fieldNames[FLD_CUSTOM_SCHEDULE_ID]));
                //added by dewok 20190217
                billdetail.setGuidePrice(rs.getDouble(fieldNames[FLD_GUIDE_PRICE]));
                billdetail.setTotalSvc(rs.getDouble(fieldNames[FLD_TOTAL_SERVICE]));
                billdetail.setTotalTax(rs.getDouble(fieldNames[FLD_TOTAL_TAX]));
                //temp.add(billdetail);
                // lists.add(temp);
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * untuk mencari list item barang yang di pesan
     *
     * @param limitStart
     * @param recordToGet
     * @param whereClause
     * @param order
     * @return
     */
    public static Vector listDetailInvoicing(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();

                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getDouble("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));
                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                temp.add(billdetail);
                lists.add(temp);
                //lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }


    /*ARI ARDIADI*/
    public static Vector listJoinUnit(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT detail.*, unit." + PstUnit.fieldNames[PstUnit.FLD_NAME] + " FROM " + TBL_CASH_BILL_DETAIL + " AS detail "
                    + "INNER JOIN " + PstUnit.TBL_P2_UNIT + " AS unit "
                    + "ON detail." + PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID] + "=unit." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID];
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();

                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getDouble("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc(rs.getDouble("DISC"));

                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));

                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setDiscGlobal(rs.getDouble(fieldNames[FLD_DISC_GLOBAL]));

                billdetail.setStatusPrint(rs.getInt("STATUS_PRINT"));
                billdetail.setParentId(rs.getLong("PARENT_ID"));
                billdetail.setCutomePackBillingId(rs.getLong("" + fieldNames[FLD_CUSTOME_PACK_BILLING_ID] + ""));
                billdetail.setParentReturnId(rs.getLong("" + fieldNames[FLD_PARENT_RETURN_ID] + ""));
                billdetail.setCostumeScheduleId(rs.getLong(fieldNames[FLD_CUSTOM_SCHEDULE_ID]));
                billdetail.setUnitName(rs.getString(PstUnit.fieldNames[PstUnit.FLD_NAME]));
                //temp.add(billdetail);
                // lists.add(temp);
                lists.add(billdetail);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    /**
     * Ari wiweka 20130721 List material for cashier
     *
     * @param rs
     * @param billdetail
     */
    public static Vector listMat(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT CD.*, "
                    + " UNT." + PstUnit.fieldNames[PstUnit.FLD_CODE]
                    + ", pm." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " FROM " + TBL_CASH_BILL_DETAIL + " AS CD INNER JOIN "
                    + PstUnit.TBL_P2_UNIT + " AS UNT ON "
                    + " CD." + fieldNames[PstBillDetail.FLD_UNIT_ID] + " = UNT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + " INNER JOIN pos_material AS pm ON pm.MATERIAL_ID=CD.MATERIAL_ID";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }
            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();
                Unit unit = new Unit();
                //resultToObject(rs, billdetail);
                billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getDouble("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));
                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setBarcodeMat(rs.getString("BARCODE"));
                billdetail.setStatus(rs.getInt("STATUS"));
                billdetail.setGuidePrice(rs.getDouble("GUIDE_PRICE"));
                temp.add(billdetail);

                unit.setCode(rs.getString("CODE"));
                temp.add(unit);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector listMatDistinct(int limitStart, int recordToGet, String whereClause, String order) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT DISTINCT CD." + fieldNames[FLD_BILL_MAIN_ID] + ", "
                    + "CD." + fieldNames[FLD_UNIT_ID] + ", "
                    + "CD." + fieldNames[FLD_MATERIAL_ID] + ", "
                    + "CD." + fieldNames[FLD_SKU] + ", "
                    + "CD." + fieldNames[FLD_ITEM_NAME] + ", "
                    + "SUM(CD." + fieldNames[FLD_QUANTITY] + ") AS " + fieldNames[FLD_QUANTITY] + ", "
                    + "CD." + fieldNames[FLD_ITEM_PRICE] + ", "
                    + "CD." + fieldNames[FLD_DISC2] + ", "
                    + "CD." + fieldNames[FLD_DISC1] + ", "
                    + "CD." + fieldNames[FLD_DISC] + ", "
                    + "CD." + fieldNames[FLD_TOTAL_DISC] + ", "
                    + "CD." + fieldNames[FLD_TOTAL_PRICE] + ", "
                    + "CD." + fieldNames[FLD_NOTE] + ", "
                    + "pm.BARCODE, "
                    + "CD." + fieldNames[FLD_STATUS] + ", "
                    + " UNT." + PstUnit.fieldNames[PstUnit.FLD_CODE]
                    + ", pm." + PstMaterial.fieldNames[PstMaterial.FLD_BARCODE]
                    + " FROM " + TBL_CASH_BILL_DETAIL + " AS CD INNER JOIN "
                    + PstUnit.TBL_P2_UNIT + " AS UNT ON "
                    + " CD." + fieldNames[PstBillDetail.FLD_UNIT_ID] + " = UNT." + PstUnit.fieldNames[PstUnit.FLD_UNIT_ID]
                    + " INNER JOIN pos_material AS pm ON pm.MATERIAL_ID=CD.MATERIAL_ID";

            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            sql += " GROUP BY CD." + fieldNames[FLD_MATERIAL_ID] + ", " + fieldNames[FLD_DISC] + ", " + fieldNames[FLD_ITEM_PRICE] + ", " + fieldNames[FLD_ITEM_NAME];

            if (order != null && order.length() > 0) {
                sql = sql + " ORDER BY " + order;
            }

            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billdetail = new Billdetail();
                Unit unit = new Unit();
                //resultToObject(rs, billdetail);
                //billdetail.setOID(rs.getLong("CASH_BILL_DETAIL_ID"));
                billdetail.setBillMainId(rs.getLong("CASH_BILL_MAIN_ID"));
                billdetail.setUnitId(rs.getLong("UNIT_ID"));
                billdetail.setMaterialId(rs.getLong("MATERIAL_ID"));
                billdetail.setSku(rs.getString("SKU"));
                billdetail.setItemName(rs.getString("ITEM_NAME"));
                billdetail.setQty(rs.getDouble("QTY"));
                billdetail.setItemPrice(rs.getDouble("ITEM_PRICE"));
                billdetail.setDisc1(rs.getDouble("DISC1"));
                billdetail.setDisc2(rs.getDouble("DISC2"));
                billdetail.setDisc(rs.getDouble("DISC"));
                billdetail.setTotalDisc(rs.getDouble("TOTAL_DISC"));
                billdetail.setTotalPrice(rs.getDouble("TOTAL_PRICE"));
                billdetail.setNote(rs.getString("NOTE"));
                billdetail.setBarcodeMat(rs.getString("BARCODE"));
                billdetail.setStatus(rs.getInt("STATUS"));
                temp.add(billdetail);

                unit.setCode(rs.getString("CODE"));
                temp.add(unit);

                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static void resultToObject(ResultSet rs, Billdetail billdetail) {
        try {
            billdetail.setOID(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]));
            billdetail.setBillMainId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]));
            billdetail.setUnitId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_UNIT_ID]));
            billdetail.setMaterialId(rs.getLong(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]));
            billdetail.setItemName(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_NAME]));
            billdetail.setItemPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE]));
            billdetail.setDiscType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_TYPE]));
            billdetail.setDisc(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC]));
            billdetail.setQty(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY]));
            billdetail.setTotalPrice(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE]));
            billdetail.setSku(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_SKU]));
            billdetail.setMaterialType(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_TYPE]));
            billdetail.setCost(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_COST]));
            billdetail.setDiscPct(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_PCT]));
            billdetail.setQtyStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_QTY_STOCK]));
            billdetail.setItemPriceStock(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_ITEM_PRICE_STOCK]));
            billdetail.setDiscGlobal(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC_GLOBAL]));
            billdetail.setDisc1(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC1]));
            billdetail.setDisc2(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_DISC2]));
            billdetail.setTotalDisc(rs.getDouble(PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_DISC]));
            billdetail.setNote(rs.getString(PstBillDetail.fieldNames[PstBillDetail.FLD_NOTE]));
            billdetail.setStatus(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]));
            billdetail.setStatusPrint(rs.getInt(PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS_PRINT]));
            billdetail.setTotalSvc(rs.getDouble(fieldNames[FLD_TOTAL_SERVICE]));
            billdetail.setTotalTax(rs.getDouble(fieldNames[FLD_TOTAL_TAX]));
            billdetail.setParentId(rs.getLong(fieldNames[FLD_PARENT_ID]));
        } catch (Exception e) {
            System.out.println("err>>> : " + e.toString());
        }
    }
    //Discount Type
    public static int DISC_TYPE_PERCENT = 1;
    public static int DISC_TYPE_VALUE = 0;

    public static boolean checkOID(long billDetailId) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
                    + " = " + billDetailId;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    public static int getCount(String whereClause) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(" + fieldNames[FLD_BILL_DETAIL_ID] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari_wiweka 20130730 cek untuk item yang sudah exist
     */
    public static int getCountExist(long oidBillMain, long oidMaterial) {
        int count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT COUNT(CD." + fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID] + ") "
                    + " FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM INNER JOIN " + TBL_CASH_BILL_DETAIL + " AS CD "
                    + " ON CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = CD." + fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "' "
                    + " AND CD." + fieldNames[PstBillDetail.FLD_MATERIAL_ID] + " = '" + oidMaterial + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari Ardiadi 20151012 GET SUM QTY ITEM
     */
    public static double getTotalPrice(long oidBillMain) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT ROUND(SUM((ROUND(" + fieldNames[FLD_ITEM_PRICE] + ") *" + fieldNames[FLD_QUANTITY] + ")-(" + fieldNames[FLD_DISC] + "*" + fieldNames[FLD_QUANTITY] + "))) AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
                count = Math.round(count);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getTotalExpense(long oidBillMain) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillMain.fieldNames[PstBillMain.FLD_SHIPPING_FEE] + "+" + PstBillMain.fieldNames[PstBillMain.FLD_ADMIN_FEE] + ") AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + PstBillMain.TBL_CASH_BILL_MAIN + " WHERE " + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + "='" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }
    
    public static double getTotalGuidePrice(long oidBillMain) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM((" + fieldNames[FLD_GUIDE_PRICE] + "*" + fieldNames[FLD_QUANTITY] + ")-(" + fieldNames[FLD_DISC] + "*" + fieldNames[FLD_QUANTITY] + ")) AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getTotalPrice2(long oidBillMain) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM((" + fieldNames[FLD_ITEM_PRICE] + "-" + fieldNames[FLD_DISC] + ")*" + fieldNames[FLD_QUANTITY] + ") AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari Ardiadi 20151012 GET SUM TOTAL PRICE INCLUDE DISC
     */
    public static double getQty(long oidBillMain) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_QUANTITY] + ") AS " + fieldNames[FLD_QUANTITY] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "' "
                    + "AND " + fieldNames[FLD_TOTAL_PRICE] + ">0";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_QUANTITY]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari Ardiadi 20151012 GET SUM TOTAL PRICE INCLUDE DISC
     */
    public static double getQtyPerCategory(long oidBillMain, long oidCategory) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(billDetail." + fieldNames[FLD_QUANTITY] + ") AS " + fieldNames[FLD_QUANTITY] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " AS billDetail "
                    + "INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS material "
                    + "ON billDetail." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + "=material." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + " "
                    + "WHERE billDetail." + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "' "
                    + "AND material." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + "='" + oidCategory + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_QUANTITY]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getQtyPerCategory2(String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(billDetail." + fieldNames[FLD_QUANTITY] + ") AS " + fieldNames[FLD_QUANTITY] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " AS billDetail "
                    + "INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS material "
                    + "ON billDetail." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + "=material." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + " "
                    + "WHERE " + where + "";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_QUANTITY]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari Ardiadi 20151012 GET SUM TOTAL PRICE INCLUDE DISC
     */
    public static double getTotalPricePerCategory(long oidBillMain, long oidCategory) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM((billDetail." + fieldNames[FLD_ITEM_PRICE] + "*billDetail." + fieldNames[FLD_QUANTITY] + ")-billDetail." + fieldNames[FLD_DISC] + ") AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " AS billDetail "
                    + "INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS material "
                    + "ON billDetail." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + "=material." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + " "
                    + "WHERE billDetail." + fieldNames[FLD_BILL_MAIN_ID] + "='" + oidBillMain + "' "
                    + "AND material." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID] + "='" + oidCategory + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getTotalPricePerCategory2(String where) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM((billDetail." + fieldNames[FLD_ITEM_PRICE] + "*billDetail." + fieldNames[FLD_QUANTITY] + ")-billDetail." + fieldNames[FLD_DISC] + ") AS " + fieldNames[FLD_TOTAL_PRICE] + " "
                    + "FROM " + TBL_CASH_BILL_DETAIL + " AS billDetail "
                    + "INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS material "
                    + "ON billDetail." + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID] + "=material." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID] + " "
                    + "WHERE " + where + "";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(fieldNames[FLD_TOTAL_PRICE]);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    //Menghitung Quantity Stock yang tersisa
    public static double getCountStock(long idBillMain, long matId) {

        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            // String sql = "SELECT " +PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]+ " FROM " +PstBillMain.TBL_CASH_BILL_MAIN+
            //   " WHERE " +PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID]+ " = '"+idBillMain+"'";

            // sql = "SELECT  SUM("+fieldNames[FLD_QUANTITY]+") FROM " +TBL_CASH_BILL_DETAIL+
            //   " WHERE "+ fieldNames[FLD_BILL_MAIN_ID] +" =(" +sql+ ") AND " +fieldNames[FLD_MATERIAL_ID]+ " ='"+matId+"'" ;
            String sql = "SELECT SUM(cd." + fieldNames[FLD_QUANTITY] + ") FROM "
                    + TBL_CASH_BILL_DETAIL + " AS cd INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS cm "
                    + " ON cd." + fieldNames[FLD_BILL_MAIN_ID] + " = cm." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE cm." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + idBillMain
                    + "' AND cd." + fieldNames[FLD_MATERIAL_ID] + " = '" + matId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }
            rsTmp.close();
            if (sum == 0) {
                sql = "'0'";
            }

            sql = "SELECT ((SELECT SUM(" + fieldNames[FLD_QUANTITY] + ") FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + fieldNames[FLD_BILL_MAIN_ID] + " ='" + idBillMain
                    + "' AND " + fieldNames[FLD_MATERIAL_ID] + " = '" + matId + "') - (" + sql + ")) AS sisaStock";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getSumTotalItem(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_TOTAL_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static double getSumTotalItemBruto(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_ITEM_PRICE] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static double getSumTotalItemReturn(String whereClause) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + fieldNames[FLD_QUANTITY] + ") FROM " + TBL_CASH_BILL_DETAIL;
            if (whereClause != null && whereClause.length() > 0) {
                sql = sql + " WHERE " + whereClause;
            }

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;

    }

    public static double getTotalCOGS(long lBillMainOid) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_COST]
                    + "*" + PstBillDetail.fieldNames[PstBillDetail.FLD_QUANTITY] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + lBillMainOid;

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getInt(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static long getCashBillDetailId(long lBillMainOid, long materialId) {
        long count = 0;
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT (" + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = '" + lBillMainOid + "'"
                    + " AND " + PstBillDetail.fieldNames[PstBillDetail.FLD_MATERIAL_ID]
                    + " = '" + materialId + "'";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getLong(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Untuk menghitung total penjualan Ari_wiweka 20130701
     *
     * @param oidCashCashier
     * @return
     */
    public static double getTotalAmount(long oidBillMain) {
        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql1 = "SELECT SUM(CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ") FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CD "
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM ON CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql1);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }

            rsTmp.close();
            if (sum == 0) {
                sql1 = "'0'";
            }

            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + oidBillMain;

            sql = "SELECT (" + sql + ") - (" + sql1 + ") AS totalJumlah";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getTotalAmountTax(long oidBillMain) {
        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql1 = "SELECT SUM(CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_TAX] + ") FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CD "
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM ON CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql1);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }

            rsTmp.close();
            if (sum == 0) {
                sql1 = "'0'";
            }

            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_TAX] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + oidBillMain;

            sql = "SELECT (" + sql + ") - (" + sql1 + ") AS totalJumlah";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public static double getTotalAmountService(long oidBillMain) {
        double count = 0;
        double sum = 0;
        DBResultSet dbrs = null;
        try {
            String sql1 = "SELECT SUM(CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_SERVICE] + ") FROM " + PstBillDetail.TBL_CASH_BILL_DETAIL + " AS CD "
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " AS CM ON CD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = CM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CM." + PstBillMain.fieldNames[PstBillMain.FLD_PARENT_ID] + " = '" + oidBillMain + "'";

            dbrs = DBHandler.execQueryResult(sql1);
            ResultSet rsTmp = dbrs.getResultSet();
            while (rsTmp.next()) {
                sum = rsTmp.getDouble(1);
            }

            rsTmp.close();
            if (sum == 0) {
                sql1 = "'0'";
            }

            String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_SERVICE] + ")"
                    + " FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = " + oidBillMain;

            sql = "SELECT (" + sql + ") - (" + sql1 + ") AS totalJumlah";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                count = rs.getDouble(1);
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    /**
     * Ari wiweka 20130716 delete bill detail berdasarkan bill main
     *
     * @param oidCashCashier
     * @return
     */
    public static long deleteBillDetail(long oidBillMain) {

        String sql = "DELETE * FROM" + TBL_CASH_BILL_DETAIL
                + " WHERE " + fieldNames[PstBillDetail.FLD_BILL_MAIN_ID] + " = '" + oidBillMain + "'";

        try {
            DBHandler.execUpdate(sql);
        } catch (Exception e) {
        }
        return oidBillMain;
    }

    public static double getReturSales(long oidCashCashier) {
        double count = 0;
        DBResultSet dbrs = null;
        try {
            // String sql = "SELECT SUM(" + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")" +
            String sql = "SELECT SUM(CBM." + PstBillMain.fieldNames[PstBillMain.FLD_RATE] + " * CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_TOTAL_PRICE] + ")"
                    + //adding tax, service
                    //by mirahu 31122011
                    //adding discount
                    //by opie-eyek 11102012
                    ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TAX_VALUE] + " AS TAX_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SERVICE_VALUE] + " AS SERVICE_VALUE"
                    + ", CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DISCOUNT] + " AS DISCOUNT_VALUE"
                    + " FROM " + TBL_CASH_BILL_DETAIL + " CBD"
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM"
                    + " ON CBD." + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_MAIN_ID]
                    + " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " WHERE CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "= 1"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "!= 2"
                    + " AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_CASH_CASHIER_ID]
                    + " = " + oidCashCashier
                    + //group by cash bill main id
                    //by mirahu 31122011
                    " GROUP BY CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " ORDER BY " + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS];

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                //count = rs.getInt(1);
                count += rs.getDouble(1) + rs.getDouble("TAX_VALUE") + rs.getDouble("SERVICE_VALUE") - rs.getDouble("DISCOUNT_VALUE");
            }
            rs.close();

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return count;
    }

    public boolean isCatalogUsed(long oid) {

        String where = fieldNames[FLD_MATERIAL_ID] + "=" + oid;
        int count = getCount(where);

        if (count > 0) {
            return true;
        }
        return false;

    }

    public static int updateStatusItem(long oidBillDetail, int statusOrder) {
        int ud = 0;
        Date now = new Date();
        String sql = "UPDATE " + TBL_CASH_BILL_DETAIL
                + " SET " + fieldNames[FLD_STATUS] + " = '" + statusOrder + "', "
                + fieldNames[FLD_LENGTH_OF_FINISH_ORDER] + " = '" + Formater.formatDate(now, "yyyy-MM-dd hh:mm:ss") + "' "
                + " WHERE " + fieldNames[FLD_BILL_DETAIL_ID] + " = '" + oidBillDetail + "'";

        try {

            DBHandler.execUpdate(sql);

        } catch (Exception e) {
            ud = -1;
        }

        return ud;
    }

    public static boolean checkUpdateStatusItem(long billDetailId, int statusOrder) {
        DBResultSet dbrs = null;
        boolean result = false;
        try {
            String sql = "SELECT * FROM " + TBL_CASH_BILL_DETAIL
                    + " WHERE " + PstBillDetail.fieldNames[PstBillDetail.FLD_BILL_DETAIL_ID]
                    + " = " + billDetailId
                    + " AND " + PstBillDetail.fieldNames[PstBillDetail.FLD_STATUS]
                    + " = 0";

            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();

            while (rs.next()) {
                result = true;
            }
            rs.close();
        } catch (Exception e) {
            System.out.println("err : " + e.toString());
        } finally {
            DBResultSet.close(dbrs);
        }
        return result;
    }

    public static int updateStatusPrintItem(long oidBillDetail, int statusPrint) {
        int ud = 0;

        String sql = "UPDATE " + TBL_CASH_BILL_DETAIL
                + " SET " + fieldNames[FLD_STATUS_PRINT] + " = '" + statusPrint + "'"
                + " WHERE " + fieldNames[FLD_BILL_DETAIL_ID] + " = '" + oidBillDetail + "'";

        try {

            DBHandler.execUpdate(sql);

        } catch (Exception e) {
            ud = -1;
        }

        return ud;
    }

    public static Vector listBillDetailByGroup(int limitStart, int recordToGet, String whereClause, String groupBy, int type) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT NG." + PstNegara.fieldNames[PstNegara.FLD_NM_NEGARA]
                    + " , NG." + PstNegara.fieldNames[PstNegara.FLD_ID_NEGARA]
                    + " , SLS." + PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + " , SLS." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
//                    + " , SLS." + PstSales.fieldNames[PstSales.FLD_NAME]
//                    + " , SLS." + PstSales.fieldNames[PstSales.FLD_SALES_ID]
                    + " , USR." + PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + " , USR." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " , CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " , CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " , SUM(CD." + fieldNames[FLD_TOTAL_PRICE] + "-CD." + fieldNames[FLD_DISC_GLOBAL] + ") AS TOTAL";
            if (type == 1) {
                sql += " , COUNT(DISTINCT CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ") AS TOTAL_QTY";
            } else {
                sql += " , SUM(CD." + fieldNames[FLD_QUANTITY] + ")" + "AS TOTAL_QTY";
            }
            sql += " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_GENDER]
                    + " , PM." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " , CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]
                    + " FROM " + TBL_CASH_BILL_DETAIL + " AS CD"
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM"
                    + " ON CD." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS PM"
                    + " ON CD." + fieldNames[FLD_MATERIAL_ID]
                    + " = PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " CAT"
                    + " ON PM." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " INNER JOIN " + PstAppUser.TBL_APP_USER + " USR"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + " = USR." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " INNER JOIN " + PstAppUser.TBL_APP_USER + " SLS"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + " = SLS." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
//                    + " INNER JOIN " + PstSales.TBL_SALES + " SLS"
//                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]
//                    + " = SLS." + PstSales.fieldNames[PstSales.FLD_CODE]
                    + " INNER JOIN " + PstNegara.TBL_BKD_NEGARA + " NG"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_ID_NEGARA]
                    + " = NG." + PstNegara.fieldNames[PstNegara.FLD_ID_NEGARA]
                    + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CL"
                    + " ON PM." + PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]
                    + " = CL." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]
                    + " WHERE " + whereClause
                    //" AND " + fieldNames[FLD_PAY_TYPE] + "!=5" +
                    //" AND " + fieldNames[FLD_PAY_TYPE] + "!=4" +
                    + " AND ("
                    + "("
                    + "CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + "='1'"
                    + ") OR ("
                    + "CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + "='1'"
                    + ") OR ("
                    + "CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + "='1'"
                    + ")"
                    + ")";
            if (!groupBy.equals("")) {
                sql += " GROUP BY " + groupBy;
            }

            //if(whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("--->>>" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billDetail = new Billdetail();
                Category category = new Category();
                AppUser appUser = new AppUser();
                Sales sales = new Sales();
                Negara negara = new Negara();
                BillMain billMain = new BillMain();
                Material material = new Material();
                ContactList contact = new ContactList();

                negara.setNmNegara(rs.getString(1));
                negara.setOID(rs.getLong(2));
                temp.add(negara);

                sales.setName(rs.getString(3));
                sales.setOID(rs.getLong(4));
                temp.add(sales);

                appUser.setFullName(rs.getString(5));
                appUser.setOID(rs.getLong(6));
                temp.add(appUser);

                category.setName(rs.getString(7));
                category.setOID(rs.getLong(8));
                temp.add(category);

                billDetail.setTotalAmount(rs.getDouble(9));
                billDetail.setQty(rs.getDouble(10));
                temp.add(billDetail);

                billMain.setGender(rs.getInt(11));
                temp.add(billMain);

                material.setName(rs.getString(12));
                temp.add(material);

                contact.setPersonName(rs.getString(13));
                temp.add(contact);
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

    public static Vector listBillReturnDetailByGroup(int limitStart, int recordToGet, String whereClause, String groupBy, int type) {
        Vector lists = new Vector();
        DBResultSet dbrs = null;
        try {
            String sql = "SELECT NG." + PstNegara.fieldNames[PstNegara.FLD_NM_NEGARA]
                    + " , NG." + PstNegara.fieldNames[PstNegara.FLD_ID_NEGARA]
//                    + " , SLS." + PstSales.fieldNames[PstSales.FLD_NAME]
//                    + " , SLS." + PstSales.fieldNames[PstSales.FLD_SALES_ID]
                    + " , SLS." + PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + " , SLS." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " , USR." + PstAppUser.fieldNames[PstAppUser.FLD_FULL_NAME]
                    + " , USR." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " , CAT." + PstCategory.fieldNames[PstCategory.FLD_NAME]
                    + " , CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " , SUM(CD." + fieldNames[FLD_TOTAL_PRICE] + "-CD." + fieldNames[FLD_DISC_GLOBAL] + ") AS TOTAL";
            if (type == 1) {
                sql += " , COUNT(DISTINCT CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID] + ") AS TOTAL_QTY";
            } else {
                sql += " , SUM(CD." + fieldNames[FLD_QUANTITY] + ")" + "AS TOTAL_QTY";
            }
            sql += " , CBM." + PstBillMain.fieldNames[PstBillMain.FLD_GENDER]
                    + " , PM." + PstMaterial.fieldNames[PstMaterial.FLD_NAME]
                    + " , CL." + PstContactList.fieldNames[PstContactList.FLD_PERSON_NAME]
                    + " FROM " + TBL_CASH_BILL_DETAIL + " AS CD"
                    + " INNER JOIN " + PstBillMain.TBL_CASH_BILL_MAIN + " CBM"
                    + " ON CD." + fieldNames[FLD_BILL_MAIN_ID]
                    + " = CBM." + PstBillMain.fieldNames[PstBillMain.FLD_BILL_MAIN_ID]
                    + " INNER JOIN " + PstMaterial.TBL_MATERIAL + " AS PM"
                    + " ON CD." + fieldNames[FLD_MATERIAL_ID]
                    + " = PM." + PstMaterial.fieldNames[PstMaterial.FLD_MATERIAL_ID]
                    + " INNER JOIN " + PstCategory.TBL_CATEGORY + " CAT"
                    + " ON PM." + PstMaterial.fieldNames[PstMaterial.FLD_CATEGORY_ID]
                    + " = CAT." + PstCategory.fieldNames[PstCategory.FLD_CATEGORY_ID]
                    + " INNER JOIN " + PstAppUser.TBL_APP_USER + " USR"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + " = USR." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
                    + " INNER JOIN " + PstAppUser.TBL_APP_USER + " SLS"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_APPUSER_ID]
                    + " = SLS." + PstAppUser.fieldNames[PstAppUser.FLD_USER_ID]
//                    + " INNER JOIN " + PstSales.TBL_SALES + " SLS"
//                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_SALES_CODE]
//                    + " = SLS." + PstSales.fieldNames[PstSales.FLD_CODE]
                    + " INNER JOIN " + PstNegara.TBL_BKD_NEGARA + " NG"
                    + " ON CBM." + PstBillMain.fieldNames[PstBillMain.FLD_ID_NEGARA]
                    + " = NG." + PstNegara.fieldNames[PstNegara.FLD_ID_NEGARA]
                    + " INNER JOIN " + PstContactList.TBL_CONTACT_LIST + " CL"
                    + " ON PM." + PstMaterial.fieldNames[PstMaterial.FLD_SUPPLIER_ID]
                    + " = CL." + PstContactList.fieldNames[PstContactList.FLD_CONTACT_ID]
                    + " WHERE " + whereClause
                    //" AND " + fieldNames[FLD_PAY_TYPE] + "!=5" +
                    //" AND " + fieldNames[FLD_PAY_TYPE] + "!=4" +
                    + " AND ("
                    + "("
                    + "CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + "='1'"
                    + ") OR ("
                    + "CBM." + PstBillMain.fieldNames[PstBillMain.FLD_DOC_TYPE] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSCATION_TYPE] + "='1' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_TRANSACTION_STATUS] + "='0' "
                    + "AND CBM." + PstBillMain.fieldNames[PstBillMain.FLD_STATUS_INVOICING] + "='1'"
                    + ")"
                    + ")";
            if (!groupBy.equals("")) {
                sql += " GROUP BY " + groupBy;
            }

            //if(whereClause != null && whereClause.length() > 0)
            //sql = sql + " WHERE " + whereClause;
            switch (DBHandler.DBSVR_TYPE) {
                case DBHandler.DBSVR_MYSQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
                    break;
                case DBHandler.DBSVR_POSTGRESQL:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + recordToGet + " OFFSET " + limitStart;
                    }
                    break;
                case DBHandler.DBSVR_SYBASE:
                    break;
                case DBHandler.DBSVR_ORACLE:
                    break;
                case DBHandler.DBSVR_MSSQL:
                    break;

                default:
                    if (limitStart == 0 && recordToGet == 0) {
                        sql = sql + "";
                    } else {
                        sql = sql + " LIMIT " + limitStart + "," + recordToGet;
                    }
            }
            System.out.println("--->>>" + sql);
            dbrs = DBHandler.execQueryResult(sql);
            ResultSet rs = dbrs.getResultSet();
            while (rs.next()) {
                Vector temp = new Vector();
                Billdetail billDetail = new Billdetail();
                Category category = new Category();
                AppUser appUser = new AppUser();
                Sales sales = new Sales();
                Negara negara = new Negara();
                BillMain billMain = new BillMain();
                Material material = new Material();
                ContactList contact = new ContactList();

                negara.setNmNegara(rs.getString(1));
                negara.setOID(rs.getLong(2));
                temp.add(negara);

                sales.setName(rs.getString(3));
                sales.setOID(rs.getLong(4));
                temp.add(sales);

                appUser.setFullName(rs.getString(5));
                appUser.setOID(rs.getLong(6));
                temp.add(appUser);

                category.setName(rs.getString(7));
                category.setOID(rs.getLong(8));
                temp.add(category);

                billDetail.setTotalAmount(rs.getDouble(9));
                billDetail.setQty(rs.getDouble(10));
                temp.add(billDetail);

                billMain.setGender(rs.getInt(11));
                temp.add(billMain);

                material.setName(rs.getString(12));
                temp.add(material);

                contact.setPersonName(rs.getString(13));
                temp.add(contact);
                lists.add(temp);
            }
            rs.close();
            return lists;

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            DBResultSet.close(dbrs);
        }
        return new Vector();
    }

}
